{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Building Home Server using Raspberry Pi with Docker","text":"<p>Author: time0ut</p> <p>Github Link: https://github.com/time0ut07/HomeServer</p> <p>Ever wanted to build your very own home server? If so, you\u2019re in the right place! Whether you are new to RPI or have done projects using RPI, thie guide is for you. In this guide, I will take you through the entire process of building a home server from scratch. Whether you're a tech enthusiast or someone looking to centralize your files and services, this guide will provide you with step-by-step instructions and insights.</p> <p>[Image of portainer containers when i have alot]</p> <p>I will be deploying Docker onto the RPI and will set up different services in containers on it. Docker allows the RPI to efficiently manage various applications in isolated containers, all while maintaining performance and scalability.</p> <p>Before we begin, here are the list of things that you will be able to learn from this guide:</p> <ol> <li>Docker</li> <li>Remote Access</li> <li>Networking</li> <li>Security</li> </ol>"},{"location":"#see-also","title":"See also","text":"<p>Do I Need a Home Server?</p> <p>What Is and What Are the Benefits of Docker Container?</p>"},{"location":"filebrowser/filebrowser/","title":"Filebrowser - Overview","text":"<p>Filebrowser is a tool that provides an easy to use interface of the computers/network storage system. It allows users to easily navigate, manage, organise, and delete files. It can also create other users and each user will have their own directory.</p> <p></p>"},{"location":"filebrowser/installation/","title":"Filebrowser - Installation","text":"<p>There are many different ways to start a filebrowser container.</p>"},{"location":"filebrowser/installation/#automated","title":"Automated","text":"<p>Run the command below to pull filebrowser docker image and create a docker for filebrowser.</p> Bash<pre><code>wget -qO- https://raw.githubusercontent.com/time0ut07/HomeServer/main/scripts/install_filebrowser.sh | bash\n</code></pre>"},{"location":"filebrowser/installation/#portainer","title":"Portainer","text":""},{"location":"filebrowser/installation/#docker-run","title":"Docker Run","text":"<p>Run these command in sequence:</p> Bash<pre><code># Create a new directory\nsudo mkdir -p /home/$USER/docker/filebrowser\n\n# Pull filebrowser docker image\ndocker pull filebrowser/filebrowser:latest\n\n# Create docker for filebrowser\ndocker run -d -p 8001:80 --name filebrowser --restart unless-stopped -v /home/$USER/docker:/srv -v /home/$USER/docker/filebrowser/filebrowser.db:/database/filebrowser.db -v /home/$USER/docker/filebrowser/settings.json:/config/settings.json -e PUID=$(id -u) -e PGID=$(id -g) filebrowser/filebrowser:latest\n</code></pre> Command Breakdown <p>The following table explains the options used in the Docker Creation command:</p> Option Description <code>-d</code> Run the container in detached mode (background) <code>-p 8001:80</code> Map port 80 in the container to port 8001 on the host (Host:Docker) <code>--name=filebrowser</code> Assigned name \"filebrowser\" to the container <code>--restart=unless-stopped</code> Restart the container automatically unless it is explicitly stopped <code>-v /home/$USER/docker:/srv</code> Mount local directory <code>/home/$USER</code> to <code>/srv</code> in the container <code>-v /home/$USER/docker/filebrowser/filebrowser.db:/database/filebrowser.db</code> Mount local file for the File Browser database to <code>/database/filebrowser.db</code> in the container <code>-v /home/$USER/docker/filebrowser/settings.json:/config/settings.json</code> Mount local settings file to <code>/config/settings.json</code> in the container <code>-e PUID=$(id -u)</code> Set user ID inside the container to match the user user ID <code>-e PGID=$(id -g)</code> Set group ID inside the container to match the user group ID <code>filebrowser/filebrowser:latest</code> Use latest File Browser image from Docker Hub"},{"location":"filebrowser/installation/#docker-compose","title":"Docker Compose","text":"<p>Run these command in sequence:</p> Bash<pre><code># Create a new directory\nsudo mkdir -p /home/$USER/docker/filebrowser\n\n# Find PUID\nid -u\n\n# Find PGID\nid -g\n</code></pre> <p>Create a new file: docker-compose.yml and add the text below (do change PUID &amp; PGID accordingly).</p> Bash<pre><code>nano docker-compose.yml\n</code></pre> Text Only<pre><code>version: '3.8'\n\nservices:\n  filebrowser:\n    image: filebrowser/filebrowser:latest\n    container_name: filebrowser\n    restart: unless-stopped\n    ports:\n      - \"8001:80\"\n    volumes:\n      - /home/$USER/docker:/srv\n      - /home/$USER/docker/filebrowser/filebrowser.db:/database/filebrowser.db\n      - /home/$USER/docker/filebrowser/settings.json:/config/settings.json\n    environment:\n      - PUID=YOUR PUID HERE\n      - PGID=YOUR PGID HERE\n</code></pre> <p>Once you have docker-compose.yml ready, run the following command:</p> Bash<pre><code>docker-compose up -d\n</code></pre>"},{"location":"getting_started/installation/","title":"Installing OS","text":"<p>I recommand using the Raspberry Pi Imager in install an OS onto your SD Card. You will need another computer together with an SD card reader to install the image. It is advised to reformat your SD card if it was used before.</p>"},{"location":"getting_started/installation/#raspberry-pi-imager","title":"Raspberry Pi Imager","text":"<p>Here's how you use RPI Imager:</p> <ol> <li>Plug in your SD card reader with your SD card loaded in</li> <li>Open RPI Imager and choose:<ul> <li>Raspberry Pi Device: Raspberry Pi 4 (Your own RPI model)</li> <li>Operating System: Raspberry Pi OS (64-bit)</li> <li>Storage: SD Card you wish to use</li> </ul> </li> <li>Pressing NEXT will lead you to a new screen, click on advanced options<ul> <li>Hostname: Choose your own hostname</li> <li>SSH: Use password authentication</li> <li>Username &amp; password: Set your own credentials</li> <li>Wireless LAN: Enter your own WiFi SSID and password</li> <li>Local settings: Set your own</li> </ul> </li> <li>Install</li> </ol>"},{"location":"getting_started/installation/#see-also","title":"See also","text":"<p>Raspberry Pi OS</p>"},{"location":"getting_started/post_installation/","title":"Post Installation","text":"<p>Once you have everything set up, boot up your RPI. Make sure you have internet connection before proceeding. There are 2 method you can proceed with for post installation.</p>"},{"location":"getting_started/post_installation/#graphical-user-interface","title":"Graphical User Interface","text":"<p>To use the GUI, ensure your RPI is connected to a monitor, keyboard, and mouse. Check the top right hand corner to ensure you have internet connection.</p> <p>Click on the console icon to launch a terminal and enter the following command:</p> Bash<pre><code>sudo apt update &amp;&amp; sudo apt install -y\n</code></pre> <p>[image of rpi console and command]</p>"},{"location":"getting_started/post_installation/#command-line-interface","title":"Command Line Interface","text":"<p>To use the CLI, you first need to SSH into your RPI. Go go to your computer's command prompt and enter</p> Bash<pre><code>ssh &lt;username&gt;@&lt;RPI IP address&gt;\n</code></pre> <p>To get your RPI's IP address, you can use the command <code>ifconfig</code> in your RPI. Look for your network interface, wlan0 for WiFi and eth0 for Ethernet.</p> <p></p> <p>Another method to get your RPI's IP address is by going into your router's webpage and look at the list of connected device. Locate the hostname you have assigned to your RPI and look at the corresponding IP address.</p> <p>Once you have remotely accessed your RPI, type in the following command:</p> Bash<pre><code>sudo apt update &amp;&amp; sudo apt install -y\n</code></pre>"},{"location":"getting_started/prerequisites/","title":"Prerequisites","text":"<p>The Table below shows the item needed to start this project. The recommended column contains the specific item I used for this project.</p> Item Recommended Raspbery Pi Raspberry Pi 4 (4GB RAM) Micro SD Card SanDisk Ultra (256GB) Power Supply Any RPI4 Case with Fan Any Heat Sink Optional Micro HDMI to HDMI Optional"},{"location":"getting_started/prerequisites/#see-also","title":"See also","text":"<p>Getting started with Raspberry Pi</p>"},{"location":"portainer/portainer/","title":"Portainer","text":"<p>Portainer is a popular Docker environment management tool. The table below shows unique benefits of portainer.</p> Benefit Description Ease of use Easy to navigate, useful for users who may not be familiar with command line Role-Base Access Control Supports user authentication and RBAC Cross Platforms Can be deployed in various platforms (Linux, Windows, and Mac) Stack Management Allows for the deployment and management of Docker stacks using Docker Compose files"},{"location":"portainer/portainer/#sign-in","title":"Sign In","text":"<p>If your installation went by smoothly without any issue, you should see a page that allows you to create a user (admin).</p> <p></p> <p>It is recommanded to change the default username (admin) to something else. Do enter a secure password as well.</p> <p>If portainer you to choose the container environment to manage, click on Docker &gt; Connect.</p> <p></p>"},{"location":"portainer/portainer/#simple-guide","title":"Simple Guide","text":"<p>Once you have sign in, you will see the home page, which will look something like this.</p> <p></p> <p>If you click on the local environment &gt; containers, you will see that portainer is currently being hosted (you should only see portainer).</p> <p></p> <p>Another way to see all current containers is using the terminal (You should only see portainer).</p> Bash<pre><code>docker ps\n</code></pre> <p></p> <p>Do explore portainer as much as you want!</p>"},{"location":"portainer/portainer/#see-also","title":"See also","text":"<p>Portainer's Universal Container Management Platform</p> <p>Huge Guide to Portainer for Beginners</p>"},{"location":"setup/installation/","title":"Installation","text":"<p>We will first need to install Docker into our RPI for the home server. I will also be using Portainer, which is an open source management tool designed to manage Docker environments as well as Kubernetes clusters. Portainer provides a GUI that simplifies management process, making it easier for users to interact without relying solely on the command line</p>"},{"location":"setup/installation/#docker-installation-automated-recommanded","title":"Docker Installation (Automated) - Recommanded","text":"<p>Run the command below to run the script that installs Docker &amp; docker compose, as well as adding the current user to the docker usergroup.</p> Bash<pre><code>wget -qO- https://raw.githubusercontent.com/time0ut07/HomeServer/main/scripts/install_docker.sh | bash\n</code></pre> <p>Do reboot your RPI after running it.</p>"},{"location":"setup/installation/#docker-installation-manual","title":"Docker Installation (Manual)","text":"<p>Run these command in sequence:</p> Bash<pre><code># Install docker\ncurl -sSL https://get.docker.com\n\n# Add the current user into the docker group\nsudo usermod -aG docker $USER\n\n# Install docker compose for your OS architecture and saves it into /usr/local/bin/docker-compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# Change the binary to an executable\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Reboot your RPI\nreboot\n</code></pre>"},{"location":"setup/installation/#portainer-installation-automated","title":"Portainer Installation (Automated)","text":"<p>Run the command below to pull portainer docker image and create a docker for portainer.</p> Bash<pre><code>wget -qO- https://raw.githubusercontent.com/time0ut07/HomeServer/main/scripts/install_portainer.sh | bash\n</code></pre> <p>Once completed, go to <code>https://localhost:9000</code></p>"},{"location":"setup/installation/#portainer-installation-manual","title":"Portainer Installation (Manual)","text":"<p>Run these command in sequence:</p> Bash<pre><code># Pull portainer docker image\nsudo docker pull portainer/portainer-ce:latest\n\n# Create docker for portainer\nsudo docker run -d -p 9000:9000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre> Command Breakdown <p>The following table explains the options used in the Docker Creation command:</p> Option Description <code>-d</code> Run the container in detached mode (background) <code>-p 9000:9000 -p 9443:9443</code> Map ports from the container to the host (Host:Docker) <code>--name=portainer</code> Assigned name to the container <code>--restart=always</code> Restart the container automatically unless explicitly stopped <code>-v /var/run/docker.sock:/var/run/docker.sock</code> Mount the Docker socket to the container for Docker management <code>-v portainer_data:/data</code> Mount a volume for persistent data storage <code>portainer/portainer-ce:latest</code> Use the latest Portainer image from Docker Hub"},{"location":"setup/ra_method/","title":"Methods","text":"<p>For this project, we will be using SSH for CLI, and XRDP for GUI remote access. It is recommanded to set up both to have both interface type when remote accessing.</p>"},{"location":"setup/ra_method/#ssh","title":"SSH","text":"<p>Secure Shell (SSH) is a protocol used for securely accessing and managing devices over a network, typically in a command line based environment. It provides encrypted communication and can be use for secure data transfer.</p> <p>SSH should be enabled on your RPI during the installation of OS. You can check by:</p> Bash<pre><code>sudo systemctl status sshd.service\n</code></pre> <p></p> <p>If you see this (image above), it means that your SSH service is running. Move on to XRDP.</p> <p>If your SSH service is stopped, use the enable command. Enable configure a service to start automatically when the system boots.</p> Bash<pre><code>sudo systemctl enable sshd.service\n</code></pre> <p>If SSH service could not be found, you will have to enable it. I will be providing both the desktop and the terminal method.</p>"},{"location":"setup/ra_method/#enable-ssh-desktop","title":"Enable SSH - Desktop","text":"<p>To enable SSH using the desktop interface.</p> <ul> <li>On the top right corner of your screen, click on the RPI logo &gt; Preferences &gt; Raspberry Pi Configuration</li> </ul> <p></p> <ul> <li>Go to Interfaces and enable SSH</li> </ul> <p></p>"},{"location":"setup/ra_method/#enabling-ssh-terminal","title":"Enabling SSH - Terminal","text":"<p>To enable SSH using the terminal.</p> <ul> <li>Use the command below</li> </ul> Bash<pre><code>sudo raspi-config\n</code></pre> <ul> <li>Using the arrow buttons go to Interfacing Options &gt; SSH &gt; Yes (To enable SSH)</li> </ul> <p></p>"},{"location":"setup/ra_method/#testing","title":"Testing","text":"<ol> <li>Ensure you are in the same network as your RPI</li> <li>SSH into your RPI (using your RPI IP address)</li> </ol> Bash<pre><code>ssh &lt;username&gt;@&lt;RPI IP address&gt;\n</code></pre>"},{"location":"setup/ra_method/#xrdp","title":"XRDP","text":"<p>XRDP is an open-source implementation of Remote Desktop Protocol (RDP), which enables users to remotely access a graphical desktop environment. XRDP is commonly used in Linux environmentto provide remote access for Windows clients.</p>"},{"location":"setup/ra_method/#installing-xrdp","title":"Installing XRDP","text":"<ul> <li>Use the command below to install XRDP</li> </ul> Bash<pre><code>sudo apt install xrdp -y\n</code></pre> <ul> <li>Check that XRDP is running</li> </ul> Bash<pre><code>sudo systemctl status xrdp\n</code></pre>"},{"location":"setup/ra_method/#testing_1","title":"Testing","text":"<ol> <li>Ensure you are in the same network as your RPI</li> <li>Using windows, search for remote desktop connection</li> <li>Key in your RPI IP address</li> <li>Connect</li> </ol>"},{"location":"setup/ra_method/#see-also","title":"See also","text":"<p>How To Easily Transfer Files Over SSH Using SCP</p>"},{"location":"setup/ra_overview/","title":"Overview","text":"<p>Implementing remote access can be useful when you want to access your servers remotely when you are out of your home network. This section is optional; if you do not want to have remote access, you can skip this part and move on to the IP Address Reservation.</p>"},{"location":"setup/ra_overview/#see-also","title":"See Also","text":"<p>What is Remote Access and How Does it Work?</p> <p>Advantages and Disadvantages of Remote Access Service</p>"},{"location":"setup/ra_tech/","title":"Technologies/Techniques","text":"<p>For this guide, we will be using VPN provided by your router. If your router does not provide VPN, you will have to use Port Forwarding.</p>"},{"location":"setup/ra_tech/#vpn","title":"VPN","text":"<p>Virtual Private Network (VPN) is a techonology that secures and ecnrypts connection over another network. There are many different tunneling protocols such as P2PT, IPsec, LT2P, and more.</p> <ol> <li>Access your router's setting page<ul> <li>Ensure you are connected to your home WiFi.</li> <li>Find out your computer's default gateway (either by <code>ifconfig</code>/<code>ipconfig</code> or going into your network settings).</li> <li>Key in the default gateway IP adress into your browser. You should see your router's settig page.</li> <li>Enter credentials</li> </ul> </li> <li>VPN Option (Steps may differ)<ul> <li>In the settings page, find the VPN option in the menu. (If you cannot find this option, you will have to use Port Forwarding</li> <li>Configure your router into a VPN server</li> <li>Add your own set of credentials</li> <li>Take note of the tunneling protocol used by your router.</li> </ul> </li> <li>Connect to VPN (Windows)<ul> <li>Settings &gt; Network &amp; internet &gt; VPN &gt; Add VPN</li> <li>Find out your public IP address (Your public IP may change once in a while by your ISP)</li> <li>server name or address: Your public IP address</li> <li>VPN Type: Protocol used by your router</li> <li>Username &amp; Password: Credentials set in your router's setting page</li> </ul> </li> </ol> <p>If successful, you will notice that your WiFi logo on the button right corner have an additional shield icon on it.</p> <p></p>"},{"location":"setup/ra_tech/#testing","title":"Testing","text":"<ol> <li>Connect to another network (Your mobile data with WiFi turn off/a network outside)</li> <li>Turn on VPN</li> <li>SSH/XRDP into your RPI (using your RPI IP address)</li> </ol>"},{"location":"setup/ra_tech/#port-forwarding","title":"Port Forwarding","text":"<p>Port Forwarding is a network technique that allows external devices to access services on a local network. It will direct traffic from a specific external port on your router to a specific internal IP address and port within your network.</p> <ol> <li>Access your router's setting page<ul> <li>Ensure you are connected to your home WiFi.</li> <li>Find out your computer's default gateway (either by <code>ifconfig</code>/<code>ipconfig</code> or going into your network settings).</li> <li>Key in the default gateway IP adress into your browser. You should see your router's settig page.</li> <li>Enter credentials</li> </ul> </li> <li>Port Forward Option (Steps may differ)<ul> <li>In the settings page, find the Port Forwarding option in the menu.</li> <li>Enter your RPI IP address (You can either <code>ifconfig</code> in your RPI or find all connected devices on the router &gt; find RPI hostname)</li> <li>Port forward:<ul> <li>RPI IP address - 22/TCP (SSH)</li> <li>RPI IP address - 3389/TCP (XRDP)</li> </ul> </li> </ul> </li> </ol>"},{"location":"setup/ra_tech/#testing_1","title":"Testing","text":"<ol> <li>Connect to another network (Your mobile data with WiFi turn off/a network outside)</li> <li>SSH/XRDP into your RPI (using your home public address)</li> </ol>"},{"location":"setup/ra_tech/#see-also","title":"See Also","text":"<p>Types of VPNs &amp; Protocols</p> <p>What is port forwarding and how safe is it?</p>"},{"location":"setup/static_ip/","title":"Static IP","text":"<p>Giving your RPI a static IP address is crucial for you to remote access it. Without a static IP address, your RPI IP address will always be changing, making it difficult remote accessing, as you would need to keep track of the new address every time it changes.</p> <p>There are many methods to make your RPI IP address static, but I will only be listing 2 of them: Reserving a Static IP Address via LAN DHCP &amp; Setting a Static IP Address Directly on the RPI.</p>"},{"location":"setup/static_ip/#lan-dhcp","title":"LAN DHCP","text":"<p>This method require you to access your router's setting page. This method makes it such that your router reserves an IP address for your RPI. Everytime your RPI connects to your router, your router will assign that particular IP address to your RPI.</p> <ol> <li>Find the menu option for LAN DHCP</li> <li>Enter your preferred IP address for your RPI (within your network range)</li> </ol>"},{"location":"setup/static_ip/#setting-on-rpi","title":"Setting on RPI","text":"<p>Terminal commands will be used for this method.</p> <ul> <li>Find your current IP address</li> </ul> Bash<pre><code>hostname -I\n</code></pre> <p></p> <ul> <li>Find your router's IP address</li> </ul> Bash<pre><code>ip r\n</code></pre> <p></p> <ul> <li>Find DNS IP address</li> </ul> Bash<pre><code>cat /etc/resolv.conf | grep \"nameserver\"\n</code></pre> <p></p> <ul> <li>Open /etc/dhcpcd.conf in any editor</li> </ul> Bash<pre><code>sudo nano /etc/dhcpcd.conf\n</code></pre> <ul> <li>Add the following lines to the button of the file. If these lines already exist and are not commented out, remove them.</li> </ul> Text Only<pre><code>interface [INTERFACE]\nstatic_routers=[ROUTER IP]\nstatic domain_name_servers=[DNS IP]\nstatic ip_address=[STATIC IP ADDRESS YOU WANT]/24\n</code></pre> <ul> <li>For our case, it will be</li> </ul> Text Only<pre><code>interface wlan0\nstatic_routers=192.168.1.254\nstatic domain_name_servers=192.168.1.254\nstatic ip_address=192.168.1.45/24\n</code></pre> <ul> <li>Save the file and reboot your RPI</li> </ul>"}]}